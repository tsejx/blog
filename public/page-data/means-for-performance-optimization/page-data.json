{"componentChunkName":"component---src-templates-blog-post-js","path":"/means-for-performance-optimization/","result":{"data":{"site":{"siteMetadata":{"title":"mrsingsing"}},"markdownRemark":{"id":"ce1362fc-a46d-5d4d-ba65-9b37338a810c","excerpt":"…","html":"<p>技术社区中其实已经有较多的关于前端性能优化的相关文章，看了多篇之后总是觉得内容还有很多遗漏或写得不够完美，尽管还没接手过流量特别大的网站应用项目，但是本人认为日常项目中也需要尽可能地进行性能优化的工作，因为前端工程师的工作很大程度上可以描述为“用尽量少的代价为用户提供效率尽可能高、功能尽可能多、体验尽可能好的网页应用”，而性能优化很大程度上就是实现“尽可能少的代价”、“效率尽可能高”以及“体验尽可能好”。</p>\n<p>因此，此文会根据网络请求到网页呈现的完整流程，针对性地提出相关阶段供开发决策者考虑采取的优化方案，因此本文更像是性能优化方案的决策树，而非标准方案：</p>\n<ul>\n<li>网络链路层面</li>\n<li>服务端层面</li>\n<li>客户端渲染层面</li>\n<li>编码层面</li>\n</ul>\n<p><strong>网络请求到网页呈现的大致流程</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">发送网络请求 =&gt; 网络链路 =&gt; 返回资源(服务端) =&gt; 渲染资源(客户端)</code></pre></div>\n<h1>关键渲染路径</h1>\n<p>在提出各层次的优化方案之前，有必要了解一下性能优化方案实际上解决了哪些性能问题以及解决这些问题的核心归结点。</p>\n<p>以下部分关于优化关键渲染路径的建议摘录自 Google 开发者文档：\n<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/optimizing-critical-rendering-path\">📖 Optimizing the Critical Rendering Path</a></p>\n<p>为了尽快完成首次渲染，我们需要最大限度减小以下三种可变因素：</p>\n<ul>\n<li>关键资源的数量</li>\n<li>关键路径长度</li>\n<li>关键字节的数量</li>\n</ul>\n<p>关键资源是可能阻止网页首次渲染的资源。这些资源越少，浏览器的工作量就越小，对 CPU 以及其他资源的占用也就越少。</p>\n<p>同样，关键路径长度受所有关键资源与其字节大小之间依赖关系图的影响：某些资源只能在上一资源处理完毕之后才能开始下载，并且资源越大，下载所需的往返次数就越多。</p>\n<p>最后，浏览器需要下载的关键字节越少，处理内容并让其出现在屏幕上的速度就越快。要减少字节数，我们可以减少资源数（将它们删除或设为非关键资源），此外还要压缩和优化各项资源，确保最大限度减小传送大小。</p>\n<p><strong>优化关键渲染路径的常规步骤如下：</strong></p>\n<ol>\n<li>对关键路径进行分析和特性描述：资源数、字节数、长度</li>\n<li>最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等</li>\n<li>优化关键字节数以缩短下载时间（往返次数）</li>\n<li>优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度</li>\n</ol>\n<h1>网络链路层面</h1>\n<p>网络链路作为网络资源和数据的传输通道，充分利用网络技术手段能有效地减少网页资源响应的速度、提升网页资源传输速度以及避免重复传输导致的资源浪费等问题。</p>\n<h2>传输策略</h2>\n<h3>DNS 查询</h3>\n<p>DNS 域名解析协议简单来就说负责将域名 URL 转化为服务器主机 IP。了解更多 <a href=\"https://tsejx.github.io/JavaScript-Guidebook/computer-networks/dns.html\">DNS 域名解析协议</a></p>\n<p>DNS 查询能从两方面进行优化：</p>\n<ul>\n<li><strong>减少 DNS 查询次数</strong></li>\n<li><strong>DNS 预解析</strong></li>\n</ul>\n<p>通过在文档中使用值为 <code class=\"language-text\">http-equiv</code> 的 <code class=\"language-text\">&lt;meta&gt;</code> 标签打开 DNS 预解析：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>x-dns-prefetch-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>on<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>通过 <code class=\"language-text\">rel</code> 属性值为 <code class=\"language-text\">dns-prefetch</code> 的 <code class=\"language-text\">&lt;link&gt;</code> 标签对特定域名进行预读取</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">&lt;link rel='dns-prefetch\" href=\"//host_name_to_prefetch.com\"/></code></pre></div>\n<p><strong>相关链接：</strong></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Controlling_DNS_prefetching\">MDN：X-DNS-Prefetch-Control</a></li>\n<li><a href=\"https://dev.chromium.org/developers/design-documents/dns-prefetching\">DNS Prefetching</a></li>\n<li><a href=\"https://bitsup.blogspot.com/2008/11/dns-prefetching-for-firefox.html\">DNS Prefetching for Firefox</a></li>\n</ul>\n<h3>TCP 连接</h3>\n<p><strong>持久化连接</strong>：避免重复进行 TCP 的三次握手，HTTP/1.1 默认开启，HTTP/1.0 可以使用。</p>\n<p>Keep-Alive 不会永久保持连接，开发者可通过服务器配置限定时间。</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header-name keyword\">Connection:</span> keep-alive</code></pre></div>\n<h3>HTTP 请求</h3>\n<ul>\n<li>\n<p><strong>减少 HTTP 请求</strong></p>\n<ul>\n<li>通过前端构建工具合并脚本和样式表</li>\n<li>CSS Sprites 精灵图</li>\n<li>图片使用 Base64 编码嵌入网页，减少图片外部载入的请求数</li>\n</ul>\n</li>\n<li>\n<p><strong>资源分布式部署至不同域名</strong></p>\n<ul>\n<li><strong>原因</strong>：主流浏览器对相同域名的并发 HTTP 请求数限制在 4~8 个，当资源过多时，可以采用增加域名的方法增加 HTTP 请求的并发量</li>\n<li><strong>原理</strong>：利用多个不同的域名可以保证这些域名能够同时加载图片，而不用排队。不过如果当使用的域名过多时，响应时间就会慢，因为不同响应域名时间不一致</li>\n</ul>\n</li>\n<li>\n<p><strong>避免重定向</strong></p>\n<ul>\n<li>URL 末尾应该添加 <code class=\"language-text\">/</code> 但未添加</li>\n</ul>\n</li>\n<li><strong>消除不必要的请求字节</strong></li>\n<li>\n<p><strong>Cookie</strong></p>\n<ul>\n<li>压缩 Cookie 大小</li>\n<li>去除不必要的 Cookie</li>\n<li>注意设置 Cookie 的 domain 级别，如没必要，不要影响子域名</li>\n<li>设置合适的过期时间</li>\n<li>静态资源使用无 Cookie 域名</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://tsejx.github.io/JavaScript-Guidebook/computer-networks/http/http2.html\">HTTP/2</a></p>\n<ul>\n<li>二进制分帧</li>\n<li>多路复用</li>\n<li>服务器推送</li>\n<li>头部压缩</li>\n<li>了解更多 [HTTP/2]</li>\n</ul>\n</li>\n<li><a href=\"https://zh.wikipedia.org/wiki/HTTP/3\">HTTP/3</a></li>\n</ul>\n<p><strong>相关链接：</strong></p>\n<ul>\n<li><a href=\"http://bubkoo.com/2015/11/19/prefetching-preloading-prebrowsing/\">前端性能优化 - 资源预加载</a></li>\n<li><a href=\"https://github.com/creeperyang/blog/issues/23\">HTTP/2 简介和基于 HTTP/2 的 Web 优化</a></li>\n</ul>\n<h2>缓存策略</h2>\n<p>制定有效的缓存策略，很大程度上能实现资源的重复利用及传输路径的优化，减少客户端对服务端的网络请求压力，减轻宽度流量。</p>\n<ul>\n<li>\n<p><a href=\"https://tsejx.github.io/JavaScript-Guidebook/browser-object-model/browser-cache/http-cache.html\">HTTP 缓存</a></p>\n<ul>\n<li><a href=\"%5Bhttps://tsejx.github.io/JavaScript-Guidebook/browser-object-model/browser-cache/http-cache.html#%E5%BC%BA%E7%BC%93%E5%AD%98%5D(https://tsejx.github.io/JavaScript-Guidebook/browser-object-model/browser-cache/http-cache.html#%E5%BC%BA%E7%BC%93%E5%AD%98)\">强缓存</a></li>\n<li>Expires 绝对时间 <code class=\"language-text\">Expires: Thu, 21 Jan 2017 23:59:59 GMT</code> 服务器和客户端时间可能不一致</li>\n<li>Cache-Control 相对时间 <code class=\"language-text\">Cache-Control: max-age=3600</code></li>\n<li><a href=\"%5Bhttps://tsejx.github.io/JavaScript-Guidebook/browser-object-model/browser-cache/http-cache.html#%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%5D(https://tsejx.github.io/JavaScript-Guidebook/browser-object-model/browser-cache/http-cache.html#%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98)\">协商缓存</a></li>\n<li>Last-Modified / If-Modified-Since 绝对时间 <code class=\"language-text\">Expires: Wed, 26 Jan 2017 00:35:11 GMT</code> 资源上次修改的时间</li>\n<li>Etag / If-None-Match 随机生成的乱码值</li>\n<li>优先使用强缓存</li>\n<li>当资源文件发生变化时，通过更新页面中引用的资源路径，让浏览器放弃缓存，加载新资源</li>\n<li>通过 <a href=\"https://link.zhihu.com/?target=http%3A//baike.baidu.com/view/10961371.htm\">数据摘要算法</a> 精准到单个文件粒度的缓存控制</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://tsejx.github.io/JavaScript-Guidebook/computer-networks/cdn.html\">CDN 缓存</a>： 将静态资源和动态网页分集群部署</p>\n<ul>\n<li>HTML 部署在自身的服务器上</li>\n<li>打包后的图片 / JavaScript 脚本文件 / CSS 样式文件等资源部署到 CDN 节点上，文件带上 Hash 值</li>\n<li>由于浏览器对单个域名请求的限制，可以将资源放在多个不同域的 CDN 上，可以绕开该限制</li>\n<li>CDN 没有 Cookie，使用 CDN 可以减少 Cookie</li>\n<li>CDN 会自动合并脚本文件等，减少请求数量</li>\n<li>但是，CDN 同时也增加了域名，增大了同时请求数量</li>\n</ul>\n</li>\n<li><strong>服务器缓存：</strong>将不变的数据、页面缓存到<strong>内存</strong>或<strong>远程存储</strong>（如 Redis 等）上</li>\n<li>\n<p><strong>浏览器缓存</strong>: 通过设置请求的过期时间，将各种不常变的数据进行缓存，合理运用浏览器缓存，缩短数据的获取时间</p>\n<ul>\n<li><a href=\"https://tsejx.github.io/JavaScript-Guidebook/browser-object-model/browser-cache/cookie.html\">Cookie</a></li>\n<li><a href=\"https://tsejx.github.io/JavaScript-Guidebook/browser-object-model/browser-cache/web-storage.html\">WebStorage</a></li>\n<li>LocalStorage</li>\n<li>SessionStorage</li>\n<li>IndexDB</li>\n<li><a href=\"https://tsejx.github.io/JavaScript-Guidebook/html5-scripting-programming/offline-and-storage/service-worker.html\">ServiceWorker</a></li>\n<li>AppCache：采用 mainfest 文件进行缓存</li>\n</ul>\n</li>\n</ul>\n<p><strong>相关链接：</strong></p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/20790576\">大公司里怎样开发和部署前端代码？</a></li>\n<li><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fimququ.com%2Fpost%2Fenhance-security-for-ls-code.html\">使用 SRI 增强 LocalStorage 代码安全</a></li>\n</ul>\n<h1>服务端层面</h1>\n<p>由于本文只涉及前端性能优化，但为求流程完整，简单罗列与服务端相关的优化方案的常见手段。</p>\n<ul>\n<li>多域名资源加载</li>\n<li>负载均衡</li>\n<li>数据缓存</li>\n<li>反向代理</li>\n</ul>\n<h1>客户端层面</h1>\n<ul>\n<li>资源渲染数量/大小</li>\n<li>资源渲染路径</li>\n<li>用户体验</li>\n</ul>\n<h2>资源渲染数量/大小</h2>\n<ul>\n<li>\n<p><strong>压缩静态资源，清除无用代码</strong></p>\n<ul>\n<li>Tree Shaking 无用代码移除</li>\n<li>UglifyJs 混淆 / 压缩代码</li>\n<li>Code Spliting 代码分割（资源按需加载或并行加载）</li>\n</ul>\n</li>\n<li>\n<p><strong>开启 Gzip 压缩</strong></p>\n<ul>\n<li>请求头 <code class=\"language-text\">Accept-Encoding: gzip, deflate</code></li>\n<li>响应头 <code class=\"language-text\">Content-Encoding: gzip</code></li>\n<li>Gzip 能够压缩任何文本类型的响应，包括 HTMl、XML 和 JSON</li>\n<li>已经压缩过的内容如图片、和 PDF 不要使用 Gzip，这些资源内容本身体积就小，再使用 Gzip 反而会增加资源下载时间，浪费 CPU 资源，而且有增加文件体积的可能</li>\n</ul>\n</li>\n<li>\n<p><strong>多份编译文件按条件引入</strong></p>\n<ul>\n<li>针对现代浏览器直接给 ES6 文件，只针对低端浏览器引用编译后的 ES5 文件</li>\n<li>可以利用 <code class=\"language-text\">&lt;script type=&quot;module&quot;&gt; / &lt;script type=&quot;module&quot;&gt;</code>进行条件引入用</li>\n</ul>\n</li>\n<li>\n<p><strong>动态 Polyfill</strong></p>\n<ul>\n<li>只针对不支持的浏览器运行环境引入 Polyfill</li>\n</ul>\n</li>\n<li>\n<p><strong>图片优化</strong></p>\n<ul>\n<li>根据业务场景，与 UI 探讨选择 <strong>合适质量，合适尺寸</strong></li>\n<li>根据需求和平台，选择 <strong>合适格式</strong>，例如非透明时可用 jpg；非苹果端，使用 webp</li>\n<li>小图片合成 <strong>雪碧图 CSS Sprite</strong>，低于 5K 的图片可以转换成 B<strong>ase64</strong> 内嵌</li>\n<li>合适场景下，使用 I<strong>confont</strong> 或者 <strong>SVG</strong></li>\n<li>压缩 favicon.ico 并缓存</li>\n<li>使用 Blob 异步加载</li>\n<li>使用 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FRevillWeb%2Fimg-2\">img-2</a> 代替 img 标签</li>\n<li>嵌入资源：Base64 嵌入资源（针对小的静态图片资源）</li>\n</ul>\n</li>\n<li>\n<p><strong>字体优化</strong></p>\n<ul>\n<li>浏览器为了避免 FOUT（Flash Of Unstyled Text），会尽量等待字体加载完成后，再显示应用了该字体的内容。带来了 FOIT（Flash Of Invisible Text 问题），导致空白</li>\n<li>设置多字体，降级方法：使用默认字体</li>\n<li>异步加载字体文件：通过异步加载 CSS，即可避免字体阻塞渲染，还是会空白</li>\n</ul>\n</li>\n<li>\n<p><strong>多媒体优化</strong></p>\n<ul>\n<li>音视频</li>\n</ul>\n</li>\n</ul>\n<h2>资源渲染路径</h2>\n<ul>\n<li>\n<p><strong>优化加载顺序</strong></p>\n<ul>\n<li>CSS 样式文件放在文档 <code class=\"language-text\">&lt;head&gt;</code> 标签中引入</li>\n<li>把样式表放在 <code class=\"language-text\">&lt;head&gt;</code> 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉</li>\n<li>JavaScript 脚本文件放在 <code class=\"language-text\">&lt;body&gt;</code> 标签底部引入</li>\n<li><strong>原因</strong>：加载脚本文件会对后续资源渲染造成阻塞</li>\n<li>\n<p><strong>方案</strong>：制定合理的脚本文件加载策略</p>\n<ul>\n<li>动态脚本加载（异步加载、延迟加载、按需加载）</li>\n<li>添加 <code class=\"language-text\">defer</code> 属性的脚本文件是在 HTML 解析完之后才会执行。如果是多个，按照加载的顺序依次执行</li>\n<li>添加 <code class=\"language-text\">async</code> 属性的脚本文件是在加载之后立即执行，如果 HTML 还没解析完，会阻塞 HTML 继续解析。如果是多个，执行顺序和加载顺序无关</li>\n</ul>\n</li>\n<li>影响首屏的，优先级很高的脚本文件也可以 <code class=\"language-text\">&lt;head&gt;</code> 或 <code class=\"language-text\">&lt;body&gt;</code> 首子节点引入，甚至利用 <code class=\"language-text\">style</code> 或 <code class=\"language-text\">script</code> 内联</li>\n</ul>\n</li>\n<li>\n<p><strong>资源加载方式</strong></p>\n<ul>\n<li>非关键性的文件尽可能的<strong>异步加载和延迟加载</strong>，避免阻塞首页渲染</li>\n<li><strong>资源提示指令</strong></li>\n<li>Preload</li>\n<li>Prefetch</li>\n<li>Preconnect</li>\n<li>Subresource</li>\n<li><strong>异步加载（预加载）</strong></li>\n<li>利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应</li>\n<li>预判用户的行为，提前加载所需要的资源，则可以快速地响应用户的操作，从而打造更好的用户体验。另一方面，通过提前发起网络请求，也可以减少由于网络过慢导致的用户等待时间。</li>\n<li>\n<p>Preload 规范 W3CPreload</p>\n<ul>\n<li>rel 明确告知浏览器启用 preload 功能</li>\n<li>as 明确需要预加载资源的类型，包括 JavaScript、Images、CSS、Media 等</li>\n</ul>\n</li>\n<li><strong>延迟加载（懒加载、按需加载）</strong></li>\n<li>\n<p>页面初始加载时将非绝对必须的资源延迟加载，从而提高页面的加载和响应速度</p>\n<ul>\n<li>非首屏使用的数据、样式、脚本、图片等</li>\n<li>用户交互时才会显示的内容</li>\n</ul>\n</li>\n<li>\n<p><strong>实现方式：</strong></p>\n<ul>\n<li>虚拟代理技术：真正加载的对象事先提供一个代理或者说占位符。最常见的场景是在图片的懒加载中，先用一种 loading 的图片占位，然后再用异步的方式加载图片。等真正图片加载完成后就填充进图片节点中去。</li>\n<li>惰性初始化技术：将代码初始化的时机推迟（特别是那些初始化消耗较大的资源）</li>\n</ul>\n</li>\n<li>\n<p><strong>选择时机：</strong></p>\n<ul>\n<li>滚动条监听：大型图片流场景，通过对用户滚动结束区域进行计算，从而只加载目标区域的资源，这样可以实现节流的目的</li>\n<li>事件回调：常用于需要用户交互的地方，如点击加载更多之类的，这些资源往往通过在用户交互的瞬间（如点击一个触发按钮），发起 AJAX 请求来获取资源。比较简单，在此不再赘述。</li>\n</ul>\n</li>\n<li>遵循渐进增强理念理念开发网站：JavaScript 用于增强用用户体验，但没有（不支持） JavaScript 也能正常工作，完全可以延迟加载 JavaScript</li>\n<li>将首屏以外的 HTML 放在不渲染的元素中，如隐藏的 <code class=\"language-text\">&lt;textarea&gt;</code>，或者 <code class=\"language-text\">type</code> 属性为非执行脚本的 <code class=\"language-text\">&lt;script&gt;</code> 标签中，减少初始渲染的 DOM 元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。</li>\n</ul>\n</li>\n<li>\n<p><strong>资源渲染</strong></p>\n<ul>\n<li>避免重排，减少重绘，避免白屏，或者交互过程中的卡顿</li>\n<li>通过 <a href=\"https://csstriggers.com/\">CSS Trigger</a> 查询哪些样式属性会触发重排与重绘</li>\n<li><strong>减少重排的方法</strong></li>\n<li>页面初始化</li>\n<li>减少对 DOM 元素内容改变（如：文本改变、图片被另一个同尺寸元素替代）</li>\n<li>减少对 DOM 元素尺寸改变（因为边距、填充、边框宽度、宽度、高度等属性改变）</li>\n<li>减少对 DOM 元素位置改变</li>\n<li>\n<p>减少对可见 DOM 元素的操作（如：增加、移动和删除）</p>\n<ul>\n<li>多次 DOM 操作合并为一次处理</li>\n<li>大量操作时，可将 DOM 脱离文档流或者隐藏，待操作完成后再重新恢复</li>\n</ul>\n</li>\n<li>减少旋转屏幕的操作</li>\n<li>减少改变浏览器窗口尺寸的操作</li>\n<li>减少设置元素 style 属性</li>\n<li>减少设置元素 class 属性</li>\n<li>\n<p>通过延迟访问布局信息避免重排版</p>\n<ul>\n<li>如 <code class=\"language-text\">offsetWidth</code>、<code class=\"language-text\">offsetHeight</code> 和 <code class=\"language-text\">getComputedStyle</code> 等</li>\n<li>原因：浏览器需要获取最新准确的值，因此必须立即进行重排，这样会破坏了浏览器的队列整合，尽量将值进行缓存使用</li>\n</ul>\n</li>\n<li>减少在 HTML 中缩放图片</li>\n<li>\n<p>避免对大部分页面进行重排版</p>\n<ul>\n<li>使用绝对坐标定位页面动画的元素，使它位于页面布局流之外</li>\n<li>启动元素动画，当它扩大时，它临时覆盖部分页面</li>\n<li>当动画结束时，重新定位，从而只一次下移文档其他元素的位置</li>\n</ul>\n</li>\n<li>\n<p>开启 GPU 加速</p>\n<ul>\n<li>transform</li>\n<li>opacity</li>\n<li>filter</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>相关链接：</strong></p>\n<ul>\n<li><a href=\"https://juejin.im/post/59b73ef75188253db70acdb5#heading-5\">前端性能优化之加载技术</a></li>\n<li><a href=\"https://juejin.im/post/5b5984b851882561da216311\">资源提示——什么是 Preload，Prefetch 和 Preconnect？</a></li>\n<li><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FGoogleChrome%2Fpreload-webpack-plugin\">preload-webpack-plugin</a></li>\n<li><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.smashingmagazine.com%2F2016%2F02%2Fpreload-what-is-it-good-for%2F\">Preload 技术细节</a></li>\n</ul>\n<h2>用户体验</h2>\n<ul>\n<li>\n<p>谨慎控制好 Web 字体，一个大字体包足够让你功亏一篑</p>\n<ul>\n<li>控制字体包的加载时机</li>\n<li>如果使用的字体有限，那尽可能只将使用的文字单独打包，能有效减少体积</li>\n</ul>\n</li>\n<li>\n<p>分清轻重缓急</p>\n<ul>\n<li>重要的元素优先渲染</li>\n<li>视窗内的元素优先渲染</li>\n</ul>\n</li>\n<li>\n<p>服务端渲染（SSR）</p>\n<ul>\n<li>减少首屏需要的数据量，剔除冗余数据和请求</li>\n<li>控制好缓存，对数据/页面进行合理的缓存</li>\n<li>页面的请求使用流的形式进行传递</li>\n</ul>\n</li>\n<li>\n<p>优化用户感知</p>\n<ul>\n<li>利用一些动画 <strong>过渡效果</strong>，能有效减少用户对卡顿的感知</li>\n<li>尽可能利用 <strong>骨架屏（Skeleton）/ Loading</strong> 等减少用户对白屏的感知</li>\n<li>动画帧数尽量保证在 <strong>30 帧</strong> 以上，低帧数、卡顿的动画宁愿不要</li>\n<li>JavaScript 执行时间避免超过 100ms ，超过的话就需要做：</li>\n<li>寻找可缓存的点</li>\n<li>任务的分割异步或 web worker 执行</li>\n</ul>\n</li>\n</ul>\n<h1>编码层面</h1>\n<p>编码优化，指的就是在代码编写时的，通过一些 <strong>最佳实践</strong>，提升代码的执行性能。通常这并不会带来非常大的收益，但这属于<strong>程序员的自我修养</strong>，而且这也是面试中经常被问到的一个方面，考察自我管理与细节的处理。</p>\n<h2>JavaScript 优化</h2>\n<ul>\n<li>\n<p><strong>数据读取</strong></p>\n<ul>\n<li>通过作用域链 / 原型链读取变量或方法时，需要更多的耗时，且越长越慢</li>\n<li>对象嵌套越深，读取值也越慢</li>\n<li>最佳实践：</li>\n<li>尽量在局部作用域中进行 <strong>变量缓存</strong></li>\n<li>避免嵌套过深的数据结构，<strong>数据扁平化</strong> 有利于数据的读取和维护</li>\n</ul>\n</li>\n<li>\n<p><strong>循环</strong>：循环通常是编码性能的关键点</p>\n<ul>\n<li>代码的性能问题会在循环中被指数倍放大</li>\n<li>最佳实践:</li>\n<li>\n<p>尽可能 减少循环次数；</p>\n<ul>\n<li>减少遍历的数据量</li>\n<li>完成目的后马上结束循环</li>\n</ul>\n</li>\n<li>避免在循环中执行大量的运算，避免重复计算，相同的执行结果应该使用缓存</li>\n<li>JavaScript 中使用 <strong>倒序循环</strong> 会略微提升性能</li>\n<li>尽量避免使用 for-in 循环，因为它会枚举原型对象，耗时大于普通循环</li>\n</ul>\n</li>\n<li><strong>条件流程性能</strong>：Map / Object > switch > if-else</li>\n<li><strong>模块化</strong>：尝试使用 <code class=\"language-text\">import()</code></li>\n</ul>\n<h2>DOM 优化</h2>\n<ul>\n<li>减少 DOM 的层级，可以减少渲染引擎工作过程中的计算量</li>\n<li>减少访问 DOM 的次数，如需多次，将 DOM 缓存于变量中</li>\n<li>使用事件委托，避免大量的事件绑定</li>\n<li>使用 <code class=\"language-text\">requestAnimationFrame</code> 来实现视觉变化：一般来说我们会使用 <code class=\"language-text\">setTimeout</code> 或 <code class=\"language-text\">setInterval</code> 来执行动画之类的视觉变化，但这种做法的问题是，回调将在帧中的某个时点运行，可能刚好在末尾，而这可能经常会使我们丢失帧，导致卡顿</li>\n</ul>\n<h2>CSS 优化</h2>\n<ul>\n<li><strong>层级扁平</strong>，避免过于多层级的选择器嵌套</li>\n<li><strong>特定的选择器</strong>：好过一层一层查找：<code class=\"language-text\">.xxx-child-text{}</code> 优于 <code class=\"language-text\">.xxx .child .text{}</code></li>\n<li>\n<p><strong>减少使用通配符与属性选择器</strong></p>\n<ul>\n<li>选择器越复杂，匹配用的时间越多</li>\n</ul>\n</li>\n<li><strong>减少不必要的多余属性</strong></li>\n<li>使用 <strong>动画属性</strong> 实现动画，动画时脱离文档流，开启硬件加速，优先使用 CSS 动画</li>\n<li>使用 <code class=\"language-text\">&lt;link&gt;</code> 替代原生 @import</li>\n<li>避免使用表达式，例如 <code class=\"language-text\">font-color: expression((new Date()).getHours()%3?&quot;#FFF&quot;:&quot;#AAA&quot;)</code> 这个表达式会持续地在页面上计算样式，影响页面性能</li>\n</ul>\n<h2>HTML 优化</h2>\n<ul>\n<li>写对文档类型声明 <code class=\"language-text\">&lt;!DOCTYPE html&gt;</code> 这能确保浏览器按照最佳的相关规范进行渲染</li>\n<li><strong>减少 DOM 数量</strong>，避免不必要的节点或嵌套；</li>\n<li>\n<p>避免空的 <code class=\"language-text\">src</code> 和 <code class=\"language-text\">href</code>：当 <code class=\"language-text\">src</code> 和 <code class=\"language-text\">href</code> 为空时，浏览器会默认填充链接，并将页面的内容加载进来作为它们的值，具体规则如下：</p>\n<ul>\n<li>IE 向<strong>页面所在的目录</strong>发送请求</li>\n<li>Safari、Chrome、Firefox 向页面本身 URL 发送请求</li>\n<li>Opera 不执行任何操作</li>\n</ul>\n</li>\n<li>图片提前 <strong>指定宽高</strong> 或者 <strong>脱离文档流</strong>，能有效减少因图片加载导致的页面回流</li>\n<li><strong>语义化标签</strong> 有利于 SEO 与浏览器的解析时间</li>\n<li>减少使用 table 进行布局，避免使用 <code class=\"language-text\">&lt;br/&gt;</code> 与 <code class=\"language-text\">&lt;hr/&gt;</code></li>\n</ul>\n<h1>参考资料</h1>\n<p><strong>性能优化方案清单</strong></p>\n<ul>\n<li>🧾 <a href=\"https://juejin.im/post/5a966bd16fb9a0635172a50a\">2018 前端性能优化清单</a></li>\n<li>🧾 <a href=\"https://github.com/berwin/Blog/issues/23\">嗨，送你一张 Web 性能优化地图</a></li>\n<li>🧾 <a href=\"https://segmentfault.com/a/1190000018263418?utm_medium=hao.caibaojian.com&#x26;utm_source=hao.caibaojian.com&#x26;share_user=1030000000178452\">Web 性能优化总结</a></li>\n<li>🧾 <a href=\"https://juejin.im/post/5b025d856fb9a07aa0484e54\">大前端性能总结</a></li>\n<li>🧾 <a href=\"https://juejin.im/post/5b6133a351882519d346853f\">CSS 性能优化的 8 个技巧</a></li>\n<li>🧾 <a href=\"https://juejin.im/post/5b7e1f81f265da436a075db4\">精读 《高效 JavaScript》</a></li>\n<li>🧾 <a href=\"https://juejin.im/post/5c011e0c5188252ea66afdfa\">Web 性能优化清单</a></li>\n<li>🗃 <a href=\"https://github.com/barretlee/performance-column/milestone/1\">性能相关基础知识点研究</a></li>\n<li>🗃 <a href=\"https://github.com/liangsenzhi/awesome-wpo-chinese\">前端性能优化资源列表</a></li>\n<li>🗃 <a href=\"https://github.com/davidsonfellipe/awesome-wpo\">awesome-wpo</a></li>\n<li>🗃 <a href=\"https://github.com/drublic/checklist\">A Frontend Checklist for Websites</a></li>\n</ul>\n<p><strong>优化方向</strong></p>\n<ul>\n<li>🎡 <a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></li>\n<li>🎡 <a href=\"http://velocity.oreilly.com.cn/2013/ppts/16_ms_optimization--web_front-end_performance_optimization.pdf\">16 毫秒的优化</a></li>\n<li>🎡 <a href=\"https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution\">Optimize JavaScript Execution 优化 JavaScript 执行</a></li>\n</ul>","frontmatter":{"title":"前端相关业务性能优化技术手段总结","date":"May 19, 2019","description":"总结从客户端到服务端全链路可优化的技术方法"}}},"pageContext":{"slug":"/means-for-performance-optimization/","previous":{"fields":{"slug":"/form-business-design-pratice-in-antd/"},"frontmatter":{"title":"AntDesign 组件化开发探索之表单业务设计实践总结"}},"next":{"fields":{"slug":"/analysis-of-vue-responsive-systrm/"},"frontmatter":{"title":"Vue 响应式系统实现探究"}}}}}