{"componentChunkName":"component---src-templates-blog-post-js","path":"/end-of-2019-summary-and-2020-outlook/","result":{"data":{"site":{"siteMetadata":{"title":"mrsingsing"}},"markdownRemark":{"id":"8f595a90-8bbe-53b0-861d-6e1045da1a28","excerpt":"2019 积极思考 拥抱变化 2020 未来趋势 持续精进 2019 积极思考 随着年龄的增长，对时间的感知是流逝得越来越快，明明感觉新年才过去没过久，就到了 2019 年的尾声，是时候为自己变化颇大的一年做个总结，同时也为 202…","html":"<ul>\n<li>\n<p>2019</p>\n<ul>\n<li>积极思考</li>\n<li>拥抱变化</li>\n</ul>\n</li>\n<li>\n<p>2020</p>\n<ul>\n<li>未来趋势</li>\n<li>持续精进</li>\n</ul>\n</li>\n</ul>\n<h2>2019</h2>\n<h3>积极思考</h3>\n<p>随着年龄的增长，对时间的感知是流逝得越来越快，明明感觉新年才过去没过久，就到了 2019 年的尾声，是时候为自己变化颇大的一年做个总结，同时也为 2020 年做好战略规划。</p>\n<p>今年对于我个人而言体悟得最深的一个道理就是 <code class=\"language-text\">选择比努力重要</code>。当然，这不是否定努力的重要性，而是在重大决策分叉面前选择了对的方向，往往能事半功倍。这体现在个人职业生涯规划、个人生活理想实现等具有长期性的决策选择上。回顾过去的人生，在很多人生关键点上正是因为选择错误导致走了很多弯路。而努力事实上应该体现在每天的工作上保持热情，用行动对抗精神上肉体上的懒惰，并采取有效的方法去提升自己的知识技能。这其实是一个不断的循环，努力后才有更多更好的选择，选择后又需要持续努力去为下一次人生选择做好准备。</p>\n<p>从业前端两年以来，一直在思考工作上遇到的问题，一直在思考行业快速更迭的技术栈，对于个人而言，应该如何应对各种变化产生的焦虑。作为软件开发者，在企业中的定位是技术提供者，而盈利最终依靠的业务，互联网企业业务需要技术提供支撑，技术在企业业务中担当的更多是平台、工具的角色，最终需要为业务服务，即便是技术含量高的公司，提供例如安全、大数据、人工智能等服务的公司最终也是为甲方提供技术支撑，不同的只是决策权是在业务部门还是技术部门的区别。</p>\n<p>在前公司工作时意识到仅仅耕耘自身的三亩地是不够的，互联网企业分工精细，前端只是在为工作流程中的一环，上游有 运营、产品、UI 和 UX，下游有后端、数据、运维等，在工作中无可避免跨部门的协作，如果只懂前端的技术，沟通时就需要很大的成本，工作效率就会因此降低。因此，平时也会有意地观察不同部门不同岗位他们的工作内容、工作方式，了解他们领域相关概念知识，逐渐地沟通效率就提高了，任务完成的速度也会越来越快。</p>\n<p>当我在意识到这些的时候，会习惯性抽象出具有共性的思考方法，例如就前端技术而言，了解不同的框架，寻找共性的地方，不变的是原理，变的只是 API 和书写代码的约定规范不同而已，那么需要用到新框架新技术的时候，就不必那么的焦虑，运用以往的学习范式能很快地学习新的技术，以前端的框架来举例，React 和 Vue 都是国内业界使用最多框架，即便使用方法上和实现上有很大不同，但本质上都是将开发者编写的代码经由 JavaScript 引擎处理后生成实际的 DOM 节点并映射到 DOM 树上，API 可以通过查阅文档获知使用方法，进阶甚至高阶用法可以通过阅读别人的代码来模仿学习。</p>\n<h3>拥抱变化</h3>\n<p>今年最大的变化就是换了工作，得益于持续的思考，在一年前就开始渴望到更大的平台发展。但是我深知贸贸然地裸辞是不理智的行为，当时我是先试着更新简历，发现工作第一年并没有特别的亮点值得在简历上写，技术栈也和刚开始找工作时候并没有什么不同，相较于毕业后一开始工作只是获得了实际的项目经验而已，而这些简单的项目经验并不足以让我找到一份更理想的工作。</p>\n<p>在充分观察自己的工作简历后，下一步就是去填补缺陷。但是现在前端相关的技术如此多，要选择学什么呢？其实最简单的就是看招聘软件上企业的招聘要求，尤其是一些大厂的 JD，了解这些 JD 不仅能知道大厂使用哪些技术栈，而大厂往往在行业中能主导或引领技术的方向，同时也是知道了行业技术风向。但是也不是什么都学，学到的技术最终还是要服务于业务，应用于生产当中。所以我着手对当时维护迭代的几个项目进行改造升级，例如通过深入研究 Webpack 提升开发体验和构建优化，思考项目的工程架构包括项目目录，数据存储方式等等。在这期间研读了大量的文章，通常在学习一个知识点的时候都会寻找网络上相关文章都阅读一遍，后来发现读完后很快的会忘记，或者之前发现的一篇优质的文章找不到了很难过，所以后来都将优秀的文段，根据自己的思路和知识的体系摘抄成笔记，一来加深的印象，二来在日后的工作中也能随时查阅。</p>\n<p>比如完成或完成大部分的笔记有：</p>\n<ul>\n<li><a href=\"https://github.com/tsejx/JavaScript-Guidebook\">JavaScript-Guidebook</a></li>\n<li><a href=\"https://github.com/tsejx/Git-Guidebook\">Git-Guidebook</a></li>\n<li><a href=\"https://github.com/tsejx/Webpack-Guidebook\">Webpack-Guidebook</a></li>\n<li><a href=\"https://github.com/tsejx/React-Guidebook\">React-Guidebook</a></li>\n<li><a href=\"https://github.com/tsejx/Vue-Guidebook\">Vue-Guidebook</a></li>\n</ul>\n<p>其实还有另一些前端相关的笔记，但是已经开头还没形成整个知识体系的：</p>\n<ul>\n<li><a href=\"https://github.com/tsejx/CSS-Guidebook\">CSS-Guidebook</a></li>\n<li><a href=\"https://github.com/tsejx/node-guidebook\">Node-Guidebook</a></li>\n<li><a href=\"https://github.com/tsejx/TypeScript-Guidebook\">TypeScript-Guidebook</a></li>\n<li><a href=\"https://github.com/tsejx/DevOps-Guidebook\">DevOps-Guidebook</a></li>\n</ul>\n<p>对于寻求在中小企业间跳槽的人来说，找工作的确需要些运气，不管是可以选择尝试的公司，还是遇到的面试官。好的面试官能很好地引导你的思路，针对的你的回答向更广更深的内容扩展。虽然是企业在做招聘，但其实在应聘当中也是考察这间公司是否靠谱的一个过程，面试官通常都是以后的直属上司，谈得来的上司在以后的工作交流中会顺畅很多。</p>\n<h2>2020</h2>\n<h3>未来的趋势</h3>\n<p>现在技术社区喜欢贩卖焦虑，当有新技术出现的时候，底下的评论几乎都是学不动了学不动了，不排除只是一种调侃而已，但也体现了国内软件开发者承担职业发展压力的状态。我也一直在思考，所谓的 35 岁职业就要面临裁员的问题，虽然个人在看到这些报道或讨论时也不免有所焦虑，但对未来还是持有乐观态度，毕竟高级人才无论何时都是紧缺的，社会在动态发展，大部分的从业者实际上只是在做重复性的、创新价值低的工作，这些工作在我看来会被逐渐取代。这不意味着这些工作会被取缔，而是会更加高效率地完成，通俗来说就是以后可能一个（高级）前端顶替两个三个前端，其实望行业巨头例如阿里、腾讯等看，不难发现慢慢地他们招聘的最低门槛也在不断提高，这印证了这种想法的趋势。</p>\n<h3>持续精进</h3>\n<p>马上要迎接下一个年度了，免不了制定计划为未来一年做好准备。但是我这人好像从来都不缺少计划，只是完成计划的执行效率并不能满足计划，所以相比于计划本身，可能需要更加关注效率本身。在之前的转正时和组长面谈时，他提到我要晋升可能需要更加关注的两个大方向：</p>\n<ul>\n<li>扩展知识广度，延续过去追求知识深度</li>\n<li>提升个人影响力（业务、技术、团队、行业）</li>\n</ul>\n<p><strong>扩展知识广度</strong></p>\n<ul>\n<li>\n<p>建立更加完善的个人知识体系</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 建立 Node.js 的知识体系，完成 <a href=\"https://github.com/tsejx/node-guidebook\">Node-Guidebook</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 建立 TypeScript 的知识体系，完成 <a href=\"https://github.com/tsejx/TypeScript-Guidebook\">TypeScript-Guidebook</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 建立前端开发及运维相关知识体系，完成 <a href=\"https://github.com/tsejx/DevOps-Guidebook\">DevOps-Guidebook</a></li>\n</ul>\n</li>\n<li>\n<p>提升前端硬编程功能</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 掌握数据结构、算法，每周至少一道 LeetCode 题目</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 掌握前端设计模式，完成 JavaScript-Pattern-Guidebook</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 弥补服务端相关内容，包括操作系统原理、行业常见框架技术及实践方案，并在个人的项目中熟练运用，包括已经启动的个人资源内容管理系统前后端相关的多个项目、个人理财资讯管理平台项目等</li>\n</ul>\n</li>\n</ul>\n<p><strong>提升个人影响力</strong></p>\n<ul>\n<li>\n<p>持续输出，正向反馈</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 坚持每天做学习日志记录，坚持每周写工作与知识储备周报</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 输出至少 26 篇具有思考深度的文章（平均每月两篇）</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 积极参与 Github 讨论，至少在 issues 中提出 50 个建设性意见，提出任意项目 25 个 PR</li>\n</ul>\n</li>\n<li>\n<p>在团队中的个人影响力</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 定期整理业务 Wiki 将常见、常用、常遇的 issues 沉淀下来，减少相关同事接手时的困难度</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 主动分享新技术和新想法，主动解决其他同事遇到的问题</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>参考资料：</strong></p>\n<ul>\n<li><a href=\"https://blog.csdn.net/li563868273/article/details/80918368\">技术人应该如何提升影响力</a></li>\n</ul>","frontmatter":{"title":"2019年度总结与2020展望计划","date":"December 21, 2019","description":"2019 复盘与 2020 计划"}}},"pageContext":{"slug":"/end-of-2019-summary-and-2020-outlook/","previous":{"fields":{"slug":"/practice-of-page-batch-update-tool-in-visual-configuration-system/"},"frontmatter":{"title":"可视化配置系统页面批量更新工具的开发实践"}},"next":{"fields":{"slug":"/event-chain-based-automatic-test-scheme-of-totorox/"},"frontmatter":{"title":"龙猫 X 基于事件链的自动化测试方案复盘"}}}}}