{"componentChunkName":"component---src-templates-blog-post-js","path":"/practice-of-page-batch-update-tool-in-visual-configuration-system/","result":{"data":{"site":{"siteMetadata":{"title":"mrsingsing"}},"markdownRemark":{"id":"a65c529c-0d0b-5509-a4a3-76e56efbb9d9","excerpt":"首发于：可视化配置系统页面批量更新工具的开发实践 TotoroX 作为 PPmoney 集团内部集 UI 和业务逻辑于一体的前端页面可视化配置系统，为运营部门提供快速构建前端页面的解决方案。该系统为页面开发及运营人员提供了强大的组件市场，通过拖拽、表单配置等方式实现专题页面的业务需求。目前已支撑集团 85…","html":"<blockquote>\n<p>首发于：<a href=\"https://juejin.im/post/5dc8fd92f265da4d287f4551\">可视化配置系统页面批量更新工具的开发实践</a></p>\n</blockquote>\n<p>TotoroX 作为 PPmoney 集团内部集 UI 和业务逻辑于一体的前端页面可视化配置系统，为运营部门提供快速构建前端页面的解决方案。该系统为页面开发及运营人员提供了强大的组件市场，通过拖拽、表单配置等方式实现专题页面的业务需求。目前已支撑集团 850+营销活动页面。</p>\n<h2>业务痛点</h2>\n<p>在产品设计阶段，产品经理会根据对用户的调研，借助用户画像理解用户的需求，想想用户使用的场景，以及他们可能会遇到的困难。随着产品上线后，运营团队通过转化漏斗分析用户交互行为以及最终的转化的实际效果。所以这个阶段，随着真实用户群体的积累，在设计阶段虚构的用户画像需要重新调研、设想。</p>\n<p>而在技术的角度，我们也希望通过用户行为数据，为产品运营提供更好的支撑，例如为不同的用户提供不同 UI 的前端页面，通过对比的方法观察数据变化，以此作为对用户行为的准确判断。</p>\n<p>以下面的营销活动页为例，我们会在既有的页面配置中生成新的页面，并根据设计要求进行局部的调整，除了 UI 部分，内部逻辑包括埋点数据、事件链条关系等也会进行相关的修正。在此需求背景之下，如果需要人工手动对每个配置页面进行修改，这将会耗费大量的人力资源。而且，上文提到会涉及逻辑的修改，配置人员不易发现变更的地方，无法对修改后的页面进行校验。综上所述，我们需要一款对比前后变化的工具，能够可视化地对不同的配置数据进行对比，并通过图形绘制的形式清晰知道配置数据树中哪些节点没有修改，哪些节点修改了，修改前后的值又是什么，就好像我们进行代码协助时通过 <code class=\"language-text\">git diff</code> 能够知道文件中哪行代码发生了冲突，通过人工判断对冲突进行修改合并，并最终达到我们需要的效果。</p>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-abtest.jpg\" alt=\"AB Test\"></p>\n<p>TotoroX 基于用户配置的数据组装生成页面，配置数据均由组件市场的物料支撑，单个组件的配置数据结构基本相同，包括但不限于：唯一标识、组件名称、组件属性、组件样式、组件事件链以及动画相关配置等。组件间在配置数据的集合中是扁平化的，通过各组件配置数据中的标识集合相互关联起来，这样的数据结构设计避免了因为嵌套层级过深而产生的问题。基于这些条件，为多路差异化对比以及合并提供了可能。</p>\n<h2>差异化配置数据结构的设计</h2>\n<p>在进行配置数据的对比合并前，需要设计出能够准确描述数据变化前后的数据结构。</p>\n<p>在 TotoroX 中，配置数据的结构模式与 JSON 的结构模式一致，因此数据结构的设计应以 JSON 的数据结构为基础。</p>\n<p>而在 JSON 中值存在以下几种数据类型：</p>\n<ul>\n<li>null</li>\n<li>字符串</li>\n<li>布尔值</li>\n<li>数值</li>\n<li>数组</li>\n<li>对象</li>\n</ul>\n<p>因此，我们不用考虑诸如 Date、Function、Symbol、Set 等数据类型的值。</p>\n<p>同时，在设定的配置数据中不能存在空值 <code class=\"language-text\">null</code>，如果要表示不对某配置项作配置，实际上会采用默认的配置属性，所以在实际配置数据中，是不会存在空值存在，可以忽略这种情况。</p>\n<p>综合上述，从大致上能分为两大类数据类型：</p>\n<ul>\n<li>基本数据类型：字符串、布尔值、数值</li>\n<li>引用数据类型：数组、对象</li>\n</ul>\n<p>那么我们是怎样去描述 JSON 对比前后变更状态呢？</p>\n<p>JSON 是目前应用广泛的数据交换格式，那么交换双方肯定需要对数据进行约定和校验，而 JSON Schema 就是扮演定义 JSON 数据约束的标准。因此，我们尝试引入 JSON Schema 的概念，并结合实际功用进行改造。</p>\n<p>传统的 JSON Schema 表现为这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://json-schema.org/draft-07/schema#\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"$id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://example.com/product.schema.json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Product\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A product from Acme's catalog\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"productId\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The unique identifier for a product\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integer\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"productName\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Name of the product\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The price of the product\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"exclusiveMinimum\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tags for the product\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"array\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"items\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"minItems\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"uniqueItems\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dimensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"length\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"number\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"width\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"number\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"number\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"required\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"length\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"width\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"required\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"productId\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"productName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"price\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>从形式上来讲，JSON Schema 还是 JSON 的格式，但不同的是，JSON Schema 会在原来的 JSON 基础上在每个层级的数据外包装了一层用以描述对应层级值的相关信息，包括对应层级的值、描述、数据类型以及其它额外配置的信息。</p>\n<p>在结构上，我们沿用了 JSON Schema 的一套标准，在源数据基础上通过遍历递归的方法对数据进行描述。而在描述的信息上，我们针对实际的应用场景进行了定制。</p>\n<p>描述信息中必不可少的就是对数据变化信息的描述，我们参考了 Git 管理代码变更的策略，在两两对比下，我们梳理出可能产生的四种值比较情况：</p>\n<ul>\n<li><strong>相等（Equal）</strong>：当两个基本数据类型的值严格相等时，则为相等状态；而对于引用数据类型，需要提供额外的手段进行匹配</li>\n<li><strong>新增（Add）</strong>：当对象间对比时，目标对象存在新增的键时，描述该键值为新增状态；同理，当数组中无对应的匹配项时，则为新增状态</li>\n<li><strong>删除（Delete）</strong>：与新增状态类似，当对象间对比时，目标对象存在删除的键时，描述该键值为删除状态，而数组中对应的匹配项不存在时，则为删除状态</li>\n<li><strong>冲突（Conflict）</strong>：当两个基本数据类型的值不严格相等时，则为冲突状态</li>\n</ul>\n<p>举个例子，如下为两个个仅有一个按钮组件的配置页数据集合：</p>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-data-structure-comparation-.jpg\" alt=\"修改前后的配置数据\"></p>\n<p>通过 diff 后预设能产生的数据结构：</p>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-result-data-structure.jpg\" alt=\"对比后产生的数据结构\"></p>\n<p>我们对描述变化的数据结构进行了约定：</p>\n<ul>\n<li>对象类型和数组类型的值使用 <code class=\"language-text\">_properties</code> 字段描述，对应值被源数据对应的数据类型包裹</li>\n<li>\n<p>基本数据类型的值根据具体值的状态 <code class=\"language-text\">_status</code> 决定展示的字段</p>\n<ul>\n<li>相等（Equal）：使用 <code class=\"language-text\">_origin</code> 表示值</li>\n<li>新增（Add）：使用 <code class=\"language-text\">_target</code> 表示新增的值</li>\n<li>删除（Delete）：使用 <code class=\"language-text\">_origin</code> 表示删除的值</li>\n<li>冲突（Conflict）：使用 <code class=\"language-text\">_orign</code> 表示更改前的值，<code class=\"language-text\">_target</code> 表示更改后的值</li>\n</ul>\n</li>\n</ul>\n<p>你也许会发现即便是对象类型和数组类型，也会有 <code class=\"language-text\">_status</code> 字段描述更改状态。这是因为我们在交互界面上采取了<strong>自底向上</strong>的状态变更显示策略。例如，当一个组件配置数据大部分保持不变的情况下，样式配置字段 <code class=\"language-text\">style</code> 中的 <code class=\"language-text\">height</code> 配置项改变了值，那么除了描述该字段的 Schema 结构中状态字段 <code class=\"language-text\">_status</code> 会显示为冲突（Conflict）外，在递归返回的过程中，亦会将层级更高的对象或数组状态标记为冲突（Conflict）。</p>\n<blockquote>\n<p>需要特别说明的是，如果下层结构仅有一种变化状态时，上层结构会显示该变化状态，而下层结构存在不只一种变化状态时，则上层会统一表示为冲突状态。</p>\n</blockquote>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-status-display-tatics.jpg\" alt=\"状态自底向上传递显示策略\"></p>\n<p>这样处理的目的，是为了树结构在可视化视图组装渲染后能够更清晰地让配置人员知道各节点的状态。树状的图形能够让开发人员快速知道哪些组件配置项发生了变更，并能沿着路径找到变化的根源。</p>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-path-to-root.jpg\" alt=\"可视化冲突解决界面\"></p>\n<h2>Diff 功能实现</h2>\n<p>约定好对比后的数据结构后，那么就要通过方法封装对变化前后的页面配置数据进行比较。</p>\n<p>在实现 diff 方法前，就设想实现的方法应该能保证在不同的配置数据结构下也能使用。也就是说，实现过程需要脱离业务相关的代码，尽可能保证方法通用性。</p>\n<p>而在实现过程中，我们遇到的其中一个问题就是当对比双方的数组类型且其数组成员为对象类型时，我们需要为此类情况提供用于匹配的方法。</p>\n<p>我们以 TotoroX 的配置为例来解释为什么需要为数组结构的比较提供匹配方法。例如 TotoroX 的配置数据中 <code class=\"language-text\">eventList</code> 字段表示组件相关的事件列表，每个事件（对象）之间的 <code class=\"language-text\">name</code> 字段是唯一的，因此我们在对比 <code class=\"language-text\">eventList</code> 数组时，需要明确对象数组中各成员的 <code class=\"language-text\">name</code> 键值为严格相等，才能对双方进行后续的 diff。而实际上，并非所有对象数组都通过 <code class=\"language-text\">name</code> 字段进行匹配，将类似的代码参杂到通用类型方法中显然是不恰当的。因此，我们需要提高类库的可拓展性，将用于对象数组匹配的方法抽离，并通过配置的形式植入。</p>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-button-data.jpeg\" alt=\"Button组件配置\"></p>\n<h3>数组辅助方法</h3>\n<p>对象数组间的匹配筛选在实现中应用的场景是较多的，因此我们封装了一系列的辅助方法减少重复的代码，包括：</p>\n<p><strong>数组差集函数</strong></p>\n<p>通过数组成员间逐一对比，筛选出两数组中所有成员的差集集合并返回（仅限于数组成员为基本类型值）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getDifference</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>功能同上，当对象数组成员为对象类型时使用，需要提供用于匹配的比较器函数，返回结果只保留以参数 <code class=\"language-text\">a</code> 传入的数组的成员项</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getDifferenceWith</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">comparator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span> <span class=\"token operator\">=></span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>数组交集函数</strong></p>\n<p>通过数组成员间逐一对比，筛选出两数组中所有成员的交集集合并返回（仅限于数组成员为基本类型值）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getIntersection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>功能同上，当对象数组成员为对象类型时使用，需要提供用于匹配的比较器函数，返回结果只保留以参数 <code class=\"language-text\">a</code> 传入的数组的的成员项</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getIntersectionWith</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">comparator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span> <span class=\"token operator\">=></span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>数组并集函数</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUnionWith</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">comparator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span> <span class=\"token operator\">=></span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>数组去重函数</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getDedupeBy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">comparator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>acc<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      acc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以留意到，上述辅助函数除了用于匹配的两个数组类型的参数外，还需要提供一个 <code class=\"language-text\">comparator</code> 的参数。<code class=\"language-text\">comparator</code> 意为比较器，类型为函数类型，用于封装方法内部 <code class=\"language-text\">filter</code> 函数对应的回调函数，从而筛选出用以匹配数组的对象成员。如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">comparator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> y<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></code></pre></div>\n<p>表示为 <code class=\"language-text\">x</code> 对象的 <code class=\"language-text\">id</code> 字段与 <code class=\"language-text\">y</code> 对象的 <code class=\"language-text\">id</code> 字段完全相等时，表示 <code class=\"language-text\">x</code> 对象和 <code class=\"language-text\">y</code> 对象为匹配的双方。</p>\n<p>通过这样的形式，我们能够将配置中数组形式存在的配置项的匹配字段以 <code class=\"language-text\">comparator</code> 的形式配置植入，而不必在实现的代码中植入业务相关的代码。当然，仅仅如此并不够的，因为还无法解决到底配置结构中到底哪个层级是数组类型的值，下面会详细解析如何解决这个问题。</p>\n<h3>差异化流程实现</h3>\n<p>根据 JSON 的不同类型的处理方式的不同，我们实现了三个方法：</p>\n<ul>\n<li><code class=\"language-text\">diffObject</code>：用于对象类型值之间的对比方法，通过 <code class=\"language-text\">Object.keys</code> 获取各自对象的键名集合，配合数组差集函数和数组交集函数，可以筛选出新对象中新增的字段集合、旧对象中删除的字段集合以及新对象和旧对象共有的字段集合</li>\n<li><code class=\"language-text\">diffArray</code>：用于数组类型值之间的对比方法，通过 <code class=\"language-text\">comparator</code> 比较函数入参，同样利用差集函数和交集函数，分别筛选出新数组中新增的数组成员、旧数组中删除的数组成员以及各自数组中共有的数组成员</li>\n<li><code class=\"language-text\">diffValue</code>：用于基本数据类型值的对比方法，采用严格相等的对比方式，若相等则为相等（Equal）状态，否则为冲突状态（Conflict）</li>\n</ul>\n<p>引用类型的值比较（也就是 <code class=\"language-text\">diffObject</code> 和 <code class=\"language-text\">diffArray</code>）在匹配到键值或数组成员时，会利用调和函数作为匹配跳板，根据传入数据源类型不同继续对下层结构的值递归执行上述三种不同数据类型的方法。</p>\n<p>而旧对象/旧数组中删除的值或新对象/新数组中新增的值，则不会再进行深层次的递归，会直接投放到另一个处理方法 <code class=\"language-text\">getRecursion</code> 中递归修改下层结构中的变化状态。</p>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-workflow.jpg\" alt=\"diff结构流程图\"></p>\n<p>对象类型值之间的比较，我们会使用 <code class=\"language-text\">Object.keys()</code> 方法分别获取两个对比对象的键名，并通过数组辅助方法拆分为三组：共同拥有的键名的集合、仅有 <code class=\"language-text\">origin</code> 对象（理解为变化前的配置对象）拥有的键名的集合和 <code class=\"language-text\">target</code> 对象（理解为变化后的配置对象）拥有的键名集合。</p>\n<p>由此可得，共同拥有的键名集合需要通过比较得出变化状态。而 <code class=\"language-text\">origin</code> 对象拥有的键名，则表示 <code class=\"language-text\">target</code> 对象没有，也就是 <code class=\"language-text\">origin</code> 对象集合中的键值被删除了，会被标记为删除状态。相似地，仅 <code class=\"language-text\">target</code> 对象拥有的键名表示 <code class=\"language-text\">origin</code> 没有该键名，则 <code class=\"language-text\">target</code> 的键值为新增配置项，会被标记为新增状态。</p>\n<p>刚才提到对象数组类型之间需要通过比较器函数 <code class=\"language-text\">comparator</code> 用于匹配，但是需要提供一种让运行机制知道什么样的数组对比需要用怎样的 <code class=\"language-text\">comparator</code>。在运行 diff 前，我们通过以递归路径为键名，以 <code class=\"language-text\">comparator</code> 为键值组成的配置对象传入 <code class=\"language-text\">diff</code> 函数。</p>\n<p>在向下递归进行配置项比较时，遇到对象类型的值，会将键名传入调和函数。在函数内部，会被推入一个已声明的面包屑栈（也称为递归路径，以数组形式表示），当返回值时，又会退栈。当检查到下层结构为数组类型时，会通过 <code class=\"language-text\">Array.prototype.join()</code> 方法将面包屑栈中的值合成键名路径，匹配外部传入的比较器配置后，将下层数组结构匹配所需的 <code class=\"language-text\">comparator</code> 传入 <code class=\"language-text\">diffArray</code> 中。这样就解决了对象数组匹配的问题，同时也将相关的业务代码抽离至外部，提升了方法的通用性和可配置性。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> comparator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果原始数据为数组类型（也就是传入数据最外层为数组类型），必须有 init 字段作为 comparator 函数</span>\n  <span class=\"token function-variable function\">init</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">eventList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'eventList.value'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">===</span> b<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'eventList.subEvents'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'eventList.subEvents.actions'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">animation</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>antType <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>antType<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>⚠️<strong>注意</strong>：如果原始数据为数组类型，则必须提供 <code class=\"language-text\">init</code> 作为根（顶层）结构的比较器函数。</p>\n<p>上述就是 diff 功能实现过程中遇到的主要问题的解决方案，但是仅对两路的配置数据进行 diff 是不够的，这主要是从我们本身 TotoroX 的业务考虑。如前文所述 <code class=\"language-text\">origin</code> 可以为用于创建页面的模版，<code class=\"language-text\">target</code> 为基于模版创建的页面，但后续需求变更时会对模版数据进行修改，而在我们的系统中并不会同步到创建的页面，那么模版修改后需要将修改的内容同步到之前创建的页面，就需要提供一个用于合并新模版与旧页面的方法，下面我们就聊聊 merge 功能的实现。</p>\n<h2>Merge 功能实现</h2>\n<p>在对 merge 功能实现过程进行讲解前，我们需要对 git 的合并策略进行一定程度的了解。</p>\n<p>git 采用三路合并策略：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">B - C - D master(*)\n \\\n  E - F dev</code></pre></div>\n<p>以我们日常的开发协作流程为例，当前分支也就是主分支为 <code class=\"language-text\">master</code>，当尝试把 <code class=\"language-text\">dev</code> 开发分支合并到 <code class=\"language-text\">master</code> 时，两个分支共同拥有的提交就是 commitB，我们将该提交 commit 称为 <code class=\"language-text\">base</code>，<code class=\"language-text\">master</code> 分支最新的提交 commitD 称为 <code class=\"language-text\">ours</code>，而 <code class=\"language-text\">dev</code> 分支最新的提交 commitF 称为 <code class=\"language-text\">theirs</code>。</p>\n<p>那么 git 是怎样合并 <code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theirs</code> 的呢？</p>\n<p>在合并时，会参考他们的共同祖先 <code class=\"language-text\">base</code>，并根据下面策略进行合并。</p>\n<table>\n<thead>\n<tr>\n<th>祖先（base）</th>\n<th>HEAD（ours）</th>\n<th>分支（theirs）</th>\n<th>结果</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>A</td>\n<td>A</td>\n<td>A</td>\n<td></td>\n</tr>\n<tr>\n<td>A</td>\n<td>A</td>\n<td>B</td>\n<td>B</td>\n<td>如果一方修改了一行，那么这一行选择修改版的</td>\n</tr>\n<tr>\n<td>A</td>\n<td>B</td>\n<td>A</td>\n<td>B</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>A</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>如果某一行双方拥有相同的变更，则选择修改过的行</td>\n</tr>\n<tr>\n<td>A</td>\n<td>B</td>\n<td>C</td>\n<td>conflict</td>\n<td>如果某一行双方都修改了，且修改得不一样，则报告冲突，需要用户解决</td>\n</tr>\n</tbody>\n</table>\n<p>根据上表规则，合并过程类似这样：</p>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-merge-strategy.png\" alt=\"合并过程\"></p>\n<p>可以看到，第四行，双方都修改了，且各自修改的内容不一样，所以 git 不知道怎么解决，所以就把问题抛给用户了。</p>\n<h3>根节点层级筛选合并</h3>\n<p>我们在实现 merge 功能时，正是采用了与此种合并策略一致的方式。在 merge 的合并流程中，原始数据即为<strong>祖先</strong>（base），而实际需要合并的两份数据分别为 <strong>Head</strong>（ours）和<strong>分支</strong>（theirs）。我们将 <code class=\"language-text\">base</code> 作为中间者，以此判断两份配置数据哪些部分是属于原始数据的，哪些部分又是新数据。</p>\n<p>首先，我们分别将新数据与共同组件 <code class=\"language-text\">base</code> 进行 diff 操作，获得分别的 JSON Schema 结构的结果，后续再对结果进行 mergeBranch 的操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">base<span class=\"token punctuation\">,</span> ours<span class=\"token punctuation\">,</span> theirs<span class=\"token punctuation\">,</span> diffComparator<span class=\"token punctuation\">,</span> mergeComparator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> originDiff <span class=\"token operator\">=</span> <span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> ours<span class=\"token punctuation\">,</span> diffComparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> targetDiff <span class=\"token operator\">=</span> <span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> theris<span class=\"token punctuation\">,</span> diffComparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> newDataSchema <span class=\"token operator\">=</span> <span class=\"token function\">mergeBranch</span><span class=\"token punctuation\">(</span>originDiff<span class=\"token punctuation\">,</span> targetDiff<span class=\"token punctuation\">,</span> mergeComparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> newDataSchema<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而由于 merge 是根据两两 diff 后的 Schema 结构的 JSON，我们先从<strong>根节点</strong>的 <code class=\"language-text\">_status</code> 字段匹配进行区分，共有五种情况：</p>\n<table>\n<thead>\n<tr>\n<th>源配置数据根节点状态</th>\n<th>变更配置数据根节点状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Equal</td>\n<td>Equal</td>\n<td>表示 <code class=\"language-text\">base</code> 和 <code class=\"language-text\">ours</code> 完全相等，<code class=\"language-text\">base</code> 和 <code class=\"language-text\">theirs</code> 完全相等，即表示三路完全相等</td>\n</tr>\n<tr>\n<td>Equal</td>\n<td>Updated</td>\n<td>表示 <code class=\"language-text\">base</code> 和 <code class=\"language-text\">ours</code> 完全相等，<code class=\"language-text\">base</code> 和 <code class=\"language-text\">theirs</code> 存在变更，即单路变更，最终给你会采用变更路数据</td>\n</tr>\n<tr>\n<td>Updated</td>\n<td>Equal</td>\n<td>表示 <code class=\"language-text\">base</code> 和 <code class=\"language-text\">ours</code> 存在变更，<code class=\"language-text\">base</code> 和 <code class=\"language-text\">theirs</code> 完全相等，即单路变更，最终给你会采用变更路数据</td>\n</tr>\n<tr>\n<td>Updated</td>\n<td>Updated</td>\n<td>表示 <code class=\"language-text\">base</code> 和 <code class=\"language-text\">ours</code> 存在变更，<code class=\"language-text\">base</code> 和 <code class=\"language-text\">theirs</code> 也存在变更，但是变更对应的值不相等，即三路冲突</td>\n</tr>\n<tr>\n<td>Updated</td>\n<td>Updated</td>\n<td>表示 <code class=\"language-text\">base</code> 和 <code class=\"language-text\">ours</code> 存在变更，<code class=\"language-text\">base</code> 和 <code class=\"language-text\">theirs</code> 也存在变更，但是变更对应的值相等，实际上 <code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theirs</code> 变更值与 <code class=\"language-text\">base</code> 值冲突</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-merge-venn-diagram.jpg\" alt=\"变更状态韦恩图\"></p>\n<p>对上述五种情况进行分析归纳后，在代码实现层面上可以大致分为三个方向处理：</p>\n<ol>\n<li>三路相等（A-A-A）=> <code class=\"language-text\">mergeUnmodified</code>（相当于上文韦恩图天蓝色部分中状态为 <code class=\"language-text\">equal</code> 的部分）</li>\n<li>单路变更，采用变更路数据（A-A-B、A-B-A）=> <code class=\"language-text\">mergeUpdated</code>（相当于上文韦恩图紫色和橙色部分，表示的是 <code class=\"language-text\">base</code> 存在但是存在变更的状态，可以是完全或局部的删除和冲突，也可以是局部配置项的新增，但是不可能是完全的新增）</li>\n<li>两路变更，根据变更情况选择或保留冲突状态并提供手动处理方式，变更又分为新增、删除和修改（A-B-B、A-B-C）=> <code class=\"language-text\">mergeConflict</code>（相当于上文韦恩图绿色、红色和蓝灰色）</li>\n</ol>\n<p>三路相等的情况是最好处理的，在对根节点进行遍历时匹配两者的 <code class=\"language-text\">_status</code> 变化状态为相等状态（<code class=\"language-text\">equal</code>）时即表明三路相等。</p>\n<p>单路变更的情况，在对根节点进行遍历时匹配两者的 <code class=\"language-text\">_status</code> 为相等（<code class=\"language-text\">equal</code>）而另一方为不相等，即为需要采用变更路数据。</p>\n<p>而对于两路变更的情况，我们不能单纯地以根节点的状态作为区分，这是因为我们采用了上文提及过的<strong>自底向上的状态变更显示策略</strong>，所以根节点呈现为变更状态，不代表整个结构内部的属性均为变更状态，也可能因为某个配置项的变更，导致结构树上层的状态改变。所以对于这种情况，我们又能细分为两种情况进行处理：</p>\n<ol>\n<li>通过 <code class=\"language-text\">comparator</code> 比较函数能两两匹配的节点树，实际上为 <code class=\"language-text\">base</code>、<code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theirs</code> 三路均存在该根节点的，则需要对双方子孙层级的节点进行递归遍历并逐一对比（相当于上文韦恩图中蓝色 <code class=\"language-text\">conflict</code> 的部分）</li>\n<li>在对比双方的配置数据中，根节点状态 <code class=\"language-text\">_status</code> 为新增状态（<code class=\"language-text\">add</code>）且子孙层级的配置属性值也为新增状态时，则可判断该配置树为完全新增（相当于上文韦恩图中绿色 <code class=\"language-text\">add</code> 的部分），按照约定的合并策略，需要保留整个配置树</li>\n</ol>\n<h3>子孙层级筛选合并</h3>\n<p>下面我们把重点聚焦于两路变更的情况下子孙层级筛选合并的实现。</p>\n<p>从根节点的变更状态的角度分析（已排除完全新增的配置节点树），可以大致分为五种情况：</p>\n<table>\n<thead>\n<tr>\n<th>base_ours 根节点状态</th>\n<th>base_theirs 根节点状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Add</td>\n<td>Add</td>\n<td>表示 <code class=\"language-text\">base</code> 没有某项配置项，而 <code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theris</code> 新增了某项配置项</td>\n</tr>\n<tr>\n<td>Conflict</td>\n<td>Conflict</td>\n<td>表示 <code class=\"language-text\">base</code> 存在某项配置项，<code class=\"language-text\">ours</code> 也存在该项配置项但是值与 <code class=\"language-text\">base</code> 不同，<code class=\"language-text\">theris</code> 也存在该项配置项但是值与 <code class=\"language-text\">base</code> 也不同（未必与 <code class=\"language-text\">ours</code> 相同/不同）</td>\n</tr>\n<tr>\n<td>Conflict</td>\n<td>Delete</td>\n<td>表示 <code class=\"language-text\">base</code> 存在某项配置项，<code class=\"language-text\">ours</code> 也存在该项配置项但是值与 <code class=\"language-text\">base</code> 不同，而 <code class=\"language-text\">theris</code> 则不存在该项配置项</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>Conflict</td>\n<td>表示 <code class=\"language-text\">base</code> 存在某项配置项，<code class=\"language-text\">ours</code> 不存在该项配置项，而 <code class=\"language-text\">theris</code> 存在该项配置项且值与 <code class=\"language-text\">base</code> 不同</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>Delete</td>\n<td>表示 base 存在某项配置项，<code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theris</code> 均不存在该配置项</td>\n</tr>\n</tbody>\n</table>\n<p>我们以一个简单的代码示例说明：</p>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-merge-code-demo.jpg\" alt=\"三路合并配置代码示例\"></p>\n<p>结合上文提及五种两两比对存在变更状态时的情况，并结合代码示例得出以下结论：</p>\n<ul>\n<li><code class=\"language-text\">color</code> 对应第一种情况，<code class=\"language-text\">base</code> 没有该配置项，而 <code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theirs</code> 则有</li>\n<li><code class=\"language-text\">width</code> 对应第二种情况，<code class=\"language-text\">base</code> 有该配置项，而 <code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theirs</code> 同样有该配置项，但是 <code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theirs</code> 的值存在差异</li>\n<li><code class=\"language-text\">height</code> 同样对应第二种情况，与 <code class=\"language-text\">width</code> 配置项不同的是，<code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theirs</code> 的值严格相等</li>\n<li><code class=\"language-text\">translateX</code> 对应第三种情况，<code class=\"language-text\">base</code> 与 <code class=\"language-text\">ours</code> 有该配置，且值冲突，而 <code class=\"language-text\">theirs</code> 则删除了该配置项</li>\n<li><code class=\"language-text\">translateX</code> 对应第四种情况，<code class=\"language-text\">base</code> 与 <code class=\"language-text\">theirs</code> 有该配置，且值冲突，而 <code class=\"language-text\">ours</code> 则删除了该配置项</li>\n<li><code class=\"language-text\">line-height</code> 对应第五种情况，仅 <code class=\"language-text\">base</code> 存在该配置项，<code class=\"language-text\">ours</code> 和 <code class=\"language-text\">theirs</code> 均删除了该配置项</li>\n</ul>\n<blockquote>\n<p>这里提及的新增或删除字段只为覆盖更完整的功能，实际的可视化配置业务中，因为组件的配置项基本固定且均提供了默认值，所以出现新增或删除字段的情况较少。</p>\n</blockquote>\n<p>最后基于 <code class=\"language-text\">base</code> 进行 diff 后得出如下两份 JSON Schema 结构差异化数据：</p>\n<p><img src=\"http://img.mrsingsing.com/diff-between-base-and-ours.jpg\" alt=\"diff-between-base-and-ours\"></p>\n<p><img src=\"http://img.mrsingsing.com/diff-between-base-and-theirs.jpg\" alt=\"diff-between-base-and-theirs\"></p>\n<p>基于三路合并的策略，当三路值均不同时会保留差异让用户手动解决，当变更两路值相同或新增时则保留相同值，最后合并后得出新的 JSON Schema 配置数据：</p>\n<p><img src=\"http://img.mrsingsing.com/diff-tool-merge-base-ours-and-theirs.jpeg\" alt=\"Merge base and ours and theirs\"></p>\n<h2>Revert 功能实现</h2>\n<p>最终通过自动合并和手动解决冲突，完整的配置数据应该所有节点都表示为相等状态。通过对返还的 JSON Schema 结构的数据递归还原，自动新建页面即完成整个批量更新页面的功能。</p>\n<hr>\n<p><strong>参考资料</strong>：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/longintchar/article/details/83049840\">三路合并 Git 学习笔记 17</a></li>\n</ul>","frontmatter":{"title":"可视化配置系统页面批量更新工具的开发实践","date":"November 15, 2019","description":"创新性研发搭建页面批量更新工具"}}},"pageContext":{"slug":"/practice-of-page-batch-update-tool-in-visual-configuration-system/","previous":{"fields":{"slug":"/analysis-of-vue-responsive-systrm/"},"frontmatter":{"title":"Vue 响应式系统实现探究"}},"next":{"fields":{"slug":"/end-of-2019-summary-and-2020-outlook/"},"frontmatter":{"title":"2019年度总结与2020展望计划"}}}}}