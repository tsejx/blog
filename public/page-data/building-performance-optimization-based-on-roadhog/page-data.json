{"componentChunkName":"component---src-templates-blog-post-js","path":"/building-performance-optimization-based-on-roadhog/","result":{"data":{"site":{"siteMetadata":{"title":"mrsingsing"}},"markdownRemark":{"id":"bc600af3-6a2c-5dd6-bbbd-322e019ea682","excerpt":"技术选型 目前我司后台系统采用基于 Webpack 为底层封装的打包工具 roadhog。开发者通过工具暴露的有限的可配置参数，可以简单明了地针对项目需要进行自定义配置。该款工具的目的很明确，就是为了简化 webpack 的配置。这对于入门级别的工程师是非常友好的，因为降低了学习 webpack…","html":"<h2>技术选型</h2>\n<p>目前我司后台系统采用基于 <a href=\"https://github.com/webpack/webpack\">Webpack</a> 为底层封装的打包工具 <a href=\"https://github.com/sorrycc/roadhog\">roadhog</a>。开发者通过工具暴露的有限的可配置参数，可以简单明了地针对项目需要进行自定义配置。该款工具的目的很明确，就是为了简化 webpack 的配置。这对于入门级别的工程师是非常友好的，因为降低了学习 webpack 的成本，免去捣鼓 webpack 复杂的配置，方便开发者快速进入开发流程。</p>\n<p>从目前项目版本的 <code class=\"language-text\">package.json</code> 向上层依赖溯源可以得出这样的依赖关系：</p>\n<blockquote>\n<p>roadhog^2.4.2 => af-webpack^0.23.0-beta.1 => webpack^3.56</p>\n</blockquote>\n<p>roadhog 基于 <a href=\"https://github.com/umijs/umi/tree/master/packages/af-webpack\"><code class=\"language-text\">umi/af-webpack</code></a> 作为底层。从社区反馈的信息得知，现时（2019.1）作者的工作重点都在 <a href=\"https://github.com/umijs/umi\">umi</a>，而 roadhog 无打算迭代升级的打算。即便将 roadhog 升级至最新版本，所依赖的底层 webpack 的版本也只是 3.5.6，webpack4+ 的优化配置均无法使用。由于工具文档提供信息有限，因此要将优化进行到极致从源码依赖着手推动项目构建优化是免不了的工作。</p>\n<h2>构建现况分析</h2>\n<blockquote>\n<p>版本 release/2.29.0</p>\n</blockquote>\n<p><strong>分析材料</strong></p>\n<ul>\n<li>通过 <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">webpack-bundle-analyzer</a> 对打包模块进行可视化分析</li>\n<li>对打包出来后的资源文件进行分析</li>\n<li>项目组织结构分析</li>\n</ul>\n<p><strong>构建情况分析</strong></p>\n<ul>\n<li>构建内存占用过高：130% 需要给 node 配置更多内存防止内存溢出导致失败</li>\n<li>构建进度观察：卡在 10%、86%、<strong>91%</strong></li>\n<li>构建使用时间：407s 366s 386s 380s 372s => 平均 382s</li>\n<li>静态资源数量：分割成共 92 个资源文件（包括入口文件，但除去默认拷贝输出的文件）</li>\n<li>\n<p>静态资源大小</p>\n<ul>\n<li>Start：总 150MB，平均，最大 5.05MB</li>\n<li>Parsed：总 88MB，平均，最大 2.48MB</li>\n<li>Gzipped：总 25MB，平均，最大 686.48KB</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>静态资源大小</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>>2MB</td>\n<td>5</td>\n</tr>\n<tr>\n<td>>1MB</td>\n<td>24</td>\n</tr>\n<tr>\n<td>>500KB</td>\n<td>60</td>\n</tr>\n</tbody>\n</table>\n<h2>项目构建优化方案</h2>\n<p>按照 <a href=\"https://github.com/pigcan/blog/issues/1\">Webpack 构建性能优化探索</a> 提供的思路，可以从四个维度着手项目构建的优化：</p>\n<ul>\n<li>从环境着手，提升下载依赖速度</li>\n<li>从项目自身着手，代码组织是否合理，依赖使用是否合理，反面提升效率</li>\n<li>从 Webpack 自身优化手段着手，优化配置，提升 Webpack 效率</li>\n<li>从 Webpack 可能存在的不足着手，优化不足，进一步提升效率</li>\n</ul>\n<h3>去除废弃依赖</h3>\n<p>观察 <code class=\"language-text\">package.json</code>，发现一些项目中废弃的依赖并没有及时处理，因此把无用的和重复安装的依赖去除。</p>\n<h3>提取第三方公共模块</h3>\n<p>此前项目中页面代码根据路由按需加载，每个页面 route 和 model 引用的第三方模块，例如 <code class=\"language-text\">react</code>、<code class=\"language-text\">dva</code>、<code class=\"language-text\">query-string</code>、<code class=\"language-text\">antd</code>、<code class=\"language-text\">moment</code> 等，都会在各自的页面中重复打包一份，这就导致根据页面分割的资源文件尺寸较大，冗余代码较多。</p>\n<p>除此之外，值得注意的是，项目中使用的 <a href=\"https://github.com/ant-design/ant-design\">AntDesign</a> 组件，尽管通过 <a href=\"https://github.com/ant-design/babel-plugin-import\">babel-plugin-import</a> 实现了组件模块的按需加载，页面引用并不会将完整的 AntDesign 引入。但是由于开始时候大部分页面都不会从零开始写，而是会选择移植相似页面的逻辑再加以修改，因此会导致相当一部分页面会将没有使用到的组件进行打包，同样会造成冗余。</p>\n<p>因此，整个项目的性能优化必然从资源依赖的第三方库着手，提前编译提取。</p>\n<p>分析 <code class=\"language-text\">package.json</code> 可以得知整个项目依赖主要有几个部分：</p>\n<ul>\n<li><a href=\"https://github.com/ant-design/ant-design\">antd</a> 基础 UI 组件库 📌</li>\n<li><a href=\"https://github.com/dvajs/dva\">dva</a> 数据管理框架</li>\n<li><a href=\"https://github.com/moment/moment\">moment</a> 时间操作工具库 📌</li>\n<li><a href=\"https://github.com/ali-sdk/ali-oss\">ali-oss</a> 阿里云 OSS 插件</li>\n<li><a href=\"https://github.com/facebook/react\">react</a> 界面框架</li>\n<li>react-dom</li>\n<li>react-router-dom</li>\n<li>universal-cookie</li>\n<li>…等等</li>\n</ul>\n<p>roadhog 暴露了 commons 参数对应 Webpack 中 plugins 的多个 <code class=\"language-text\">webpack.CommonsChunkPlugin</code> 实例。下面有两种可选择的方案供实现：</p>\n<ul>\n<li>被至少固定个数（默认两个） entry/page 依赖即提取公共，这样 common 公共模块会比较大，项目整体尺寸最小，但页面首屏渲染需要加载的资源尺寸会比较大</li>\n<li>被所有 entry/page 依赖才提取为公共，这样 common 公共模块比较小，项目整体尺寸较大</li>\n</ul>\n<p>最终决定将所有依赖的第三方模块提前打包，在用户访问页面时需要将基础工具和基础组件的打包文件先加载，后续用户界面资源文件加载就会相对另一种方案会更加快速。</p>\n<p>相关扩展：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000012828879\">详解 CommonsChunkPlugin 的配置和用法</a></li>\n<li><a href=\"https://juejin.im/post/5c2205e15188257507558c5a\">webpack.optimize.CommonsChunkPlugin 详解</a></li>\n<li><a href=\"https://www.jianshu.com/p/95752b101582\">webpack、manifest、runtime、缓存与 CommonsChunkPlugin</a></li>\n</ul>\n<h3>第三方模块不同兼容库重复打包</h3>\n<p><img src=\"http://img.mrsingsing.com/roadhog-performance-build-analyze.jpg\" alt=\"优化前打包结果\"></p>\n<p>vendor 提取第三方模块后，发现几个比较大的页面资源文件里仍然存在 antd.lib 组件库的代码，而且这些 <code class=\"language-text\">ant.lib</code> 都是完整一个模块被打包进了这些页面当中，但其实 AntDesign 已经被我完整单独地打包成另外一个文件了，这个打包的文件是由 <code class=\"language-text\">ant.es</code> 打包出来的。</p>\n<ul>\n<li>antd.es</li>\n<li>antd.lib</li>\n</ul>\n<p>通过对打包后的文件以及业务代码的检查，发现是引用 Antd 组件库发生了问题，由于使用了 webpack-plugin-import 插件，将 Antd 中名为 es 的组件库按需加载并通过 babel 转化独立打包成 vendor，因此当使用 <code class=\"language-text\">import {message} from &quot;antd/lib/index&quot;</code> 这种写法的时候，当前页面会将 Antd lib 目录下的组件全部打包，造成页面打包文件臃肿。</p>\n<p>书写规范\n使用了 extraBabelPlugins 就会按需加载</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// wrong</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/lib/index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>忽略 moment 语言包的打包</h3>\n<p><img src=\"http://img.mrsingsing.com/roadhog-performance-moment-locale.jpg\" alt=\"忽略 moment 语言包\"></p>\n<p>打包后 moment 包的体积比较大，其中 locale 语言包部分占据了比较大的体积，由于我们的项目没有国际化需求，因此可以通过配置 roadhog 提供的 <code class=\"language-text\">ignoreMomentLocale: true</code> 减少打包出来的 vendor 尺寸。</p>\n<p>但是，如果项目中使用到 AntDesign 组件，并且使用到时间选择组件 <code class=\"language-text\">date-picker</code>（默认是英文文案），那么这里需要做一些处理以使项目中组件能够显示中文。</p>\n<p>我是在项目最上层，单独引入 moment 的中文语言包。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">'moment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'moment/locale/zh-cn'</span><span class=\"token punctuation\">;</span>\n\nmoment<span class=\"token punctuation\">.</span><span class=\"token function\">locale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zh-cn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样项目中使用到 moment 工具库的 <code class=\"language-text\">date-picker</code> 都会显示中文文案。</p>\n<h3>压缩耗时</h3>\n<p>项目构建过程会卡在 91%，通过查阅相关资料和了解社区反馈后，明确原因为该阶段 Webpack 正在对代码进行混淆压缩操作，但同时由于 Webpack 的压缩插件 UglifyJS 无法对 ES6+ 的代码进行压缩，需要使用 <a href=\"https://github.com/babel/minify\">babel-minify</a> 获取更好的 treeshaking 效果（虽然 Webpack4 已经支持 ES6+ 代码压缩，但是目前 Roadhog 采用的是 Webpack3+）。</p>\n<p><a href=\"https://hackmd.io/YHK_yuRtT0ePPVLY0_kUzw\">构建速度慢的解决方法@sorrycc</a></p>\n<p>体现特征：</p>\n<ul>\n<li>构建速度慢</li>\n<li>内存消耗高</li>\n</ul>\n<p>解决方法：</p>\n<ul>\n<li>\n<p>减少依赖文件</p>\n<ul>\n<li>优化 common 提取策略，让整体尺寸尽可能少</li>\n<li>externals 掉一些大的库，降低整体尺寸</li>\n<li>利用 webpack 的 TreeShaking + es module，排除掉一些没有用到的模块</li>\n</ul>\n</li>\n<li>减少需要压缩的文件</li>\n</ul>\n<h3>外部扩展</h3>\n<p>externals 是非常有效的一个方案，可以一下子减少大量需要编译、压缩的模块。将一些不常更新版本比较稳定的模块文件直接注入 HMTL 文件，当读取到该脚本时将自动加载，这不仅能加快构建速度，而且能够利用 CDN 进行资源缓存。</p>\n<p>但是会带来的问题是：</p>\n<ul>\n<li>无法利用 Webpack 的 Tree-Shaking</li>\n<li>多个库之间如果存在公共模块（比如 lodash），就无法复用</li>\n</ul>\n<p>使用 externals 需要在 HTML 里引用额外的 JS 文件，这里也有几个潜在的问题：</p>\n<ul>\n<li>如果你的 CDN 不支持 Combo，并且不是 http/2，那么速度会很慢</li>\n<li>你需要手动维护一份 CDN 文件列表，并且跟进他们的更新，也是件麻烦的事情</li>\n</ul>\n<p>这里主要将三个尺寸较大且比较少项目页面引用的模块 externals 掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">externals<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'ali-oss'</span><span class=\"token operator\">:</span> <span class=\"token string\">'window.OSS'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'react'</span><span class=\"token operator\">:</span> <span class=\"token string\">'window.react'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'react-dom'</span><span class=\"token operator\">:</span> <span class=\"token string\">'window.ReactDOM'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>项目样式文件减少</h3>\n<p>ExtractTextPlugin 提取 CSS (antd + 业务)</p>\n<p>能用公共就用公共（因为大部分的页面的样式几乎一样），不然每个页面开一个 less 引用公共，会重复打包，造成冗余。</p>\n<h3>Gzip 传输压缩</h3>\n<p>gzip 需要在服务器配置开启</p>\n<p>这里提供一种 Nginx 的配置。<a href=\"https://blog.csdn.net/qq_36030288/article/details/54576503\">传送门</a></p>\n<p><a href=\"https://www.cnblogs.com/zs-note/p/9556390.html\">前端性能优化：gzip 压缩文件传输数据</a></p>\n<h2>优化效果分析</h2>\n<p><img src=\"http://img.mrsingsing.com/roadhog-performance-optimizition-result.jpg\" alt=\"优化效果分析\"></p>\n<ul>\n<li>开发体验：70s => 20s 启动项目时间提升 71%</li>\n<li>构建速度：382s => 40s 项目构建速度提升 89%</li>\n<li>资源文件：88Mb（未开启 Gzip） => 25Mb（开启 Gzip） => 1Mb（优化后开启 Gzip） 资源文件尺寸大幅度降低</li>\n</ul>\n<h2>后续需要解决的问题</h2>\n<h3>单独打包的 AntDesign 尺寸过大</h3>\n<ul>\n<li>可视化分析尺寸较大的文件包括 rc-editor-core / draft.js 等</li>\n<li>通过依赖找到根源是 rc-editor-mention => rc-editor-core => draft-js 来自 Mention 组件，但是项目中并没有使用到</li>\n<li>得出结果提取打包将整个组件库都打包进来了</li>\n</ul>\n<p>社区中有反应希望提取公共模块打包时将其中某些部分忽略不打包，而维护者似乎告知需要使用 <code class=\"language-text\">babel-plugin-import</code> 按需引用，并没提供提取公共模块的解决方案。 <a href=\"https://github.com/ant-design/ant-design/issues/10180\">传送门</a></p>\n<h2>参考资料</h2>\n<ul>\n<li><a href=\"https://github.com/sorrycc/roadhog/issues/370\">支持 vendor 的配置 Issue #370</a></li>\n<li><a href=\"https://github.com/sorrycc/roadhog/issues/577\">roadhog2 如何成功提取 vendor · Issue #577</a></li>\n<li><a href=\"https://github.com/sorrycc/roadhog/issues/722\">编译很慢 #722</a></li>\n<li><a href=\"https://github.com/liangxinwei/blog/blob/master/webpack/2.md\">roadhog 1.3x 打包慢的解决办法</a></li>\n<li><a href=\"http://www.mamicode.com/info-detail-2413081.html\">Roadhog 构建优化</a></li>\n<li><a href=\"https://www.itcodemonkey.com/article/12011.html\">JS/CSS 体积减少了 67%，我们是如何做到的？</a></li>\n<li><a href=\"https://github.com/creeperyang/blog/issues/37\">Webpack 日常使用与优化</a></li>\n</ul>","frontmatter":{"title":"基于 roadhog^2.x 的后台项目构建性能优化","date":"January 20, 2019","description":"结合构建工具的极致化运用和构建产物的研究分析对 roadhog 的项目进行构建优化"}}},"pageContext":{"slug":"/building-performance-optimization-based-on-roadhog/","previous":null,"next":{"fields":{"slug":"/form-business-design-pratice-in-antd/"},"frontmatter":{"title":"AntDesign 组件化开发探索之表单业务设计实践总结"}}}}}